akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = INFO
  logger-startup-timeout = 30s
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 0
  log-dead-letters-during-shutdown = false

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    allow-java-serialization = off
  }

  remote {
    log-remote-lifecycle-events = off

    artery {
      # Select the underlying transport implementation.
      # Possible values: aeron-udp, tcp, tls-tcp
      # See https://doc.akka.io/docs/akka/current/remoting-artery.html#selecting-a-transport for the tradeoffs
      # for each transport

      #https://doc.akka.io/docs/akka/current/remoting-artery.html#selecting-a-transport
      #transport = aeron-udp
    }
  }


  //akka.cluster.coordinated-shutdown.default-phase-timeout
}

akka.cluster {
  coordinated-shutdown {
    phases {
      cluster-exiting {
        timeout = 10 s
        depends-on = [cluster-leave]
      }

      cluster-sharding-shutdown-region {
        timeout = 10 s
        depends-on = [before-cluster-shutdown]
      }
    }

    exit-jvm = on
    default-phase-timeout = 5 seconds
  }
}


http {
  dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
      parallelism-max = 4
    }
    throughput = 1000
  }
}



akka.management.cluster.bootstrap.contact-point-discovery {
  service-name = my-console
  discovery-method = config

  # boostrap filters ports with the same IP assuming they are previous instances running on the same node
  # unless a port is specified
  port-name = "management"
  required-contact-point-nr = 1
  # config service discovery never changes
  stable-margin = 3 ms
  # bootstrap without all the nodes being up
  contact-with-all-contact-points = false
}

akka.discovery.config.services {
  "my-console" {
    endpoints = [
      {host = "127.0.0.1", port = 8081}
      {host = "127.0.0.2", port = 8081}
    ]
  }
}